{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "projeto-classif.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "U8MHADBJUK4l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95941c7d-db7a-49c7-cc6a-455e1b05faee"
      },
      "source": [
        "from urllib.request import urlopen\n",
        "import ssl\n",
        "import json\n",
        "\n",
        "ctx = ssl.create_default_context()\n",
        "ctx.check_hostname = False\n",
        "ctx.verify_mode = ssl.CERT_NONE\n",
        "\n",
        "dataTrain = urlopen(\"https://raw.githubusercontent.com/budzianowski/multiwoz/master/data/MultiWOZ_2.2/train/dialogues_001.json\", context=ctx).read().decode()\n",
        "dataTest = urlopen(\"https://raw.githubusercontent.com/budzianowski/multiwoz/master/data/MultiWOZ_2.2/test/dialogues_001.json\", context=ctx).read().decode()\n",
        "\n",
        "myJsonTrain = json.loads(dataTrain)\n",
        "myJsonTest = json.loads(dataTest)\n",
        "print (json.dumps(myJsonTrain[0], indent=1)[0:100])\n",
        "print (json.dumps(myJsonTest[0], indent=1)[0:100])"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{\n",
            " \"dialogue_id\": \"PMUL4398.json\",\n",
            " \"services\": [\n",
            "  \"restaurant\",\n",
            "  \"hotel\"\n",
            " ],\n",
            " \"turns\": [\n",
            "  {\n",
            "   \"\n",
            "{\n",
            " \"dialogue_id\": \"MUL0484.json\",\n",
            " \"services\": [\n",
            "  \"attraction\",\n",
            "  \"train\"\n",
            " ],\n",
            " \"turns\": [\n",
            "  {\n",
            "   \"f\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a1aMyngwSsvz"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "import tensorflow_datasets as tfds\n",
        "import tensorflow as tf"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5oWqao78U9xc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b6fd5a9-ce36-4905-d91b-18d915272090"
      },
      "source": [
        "# filter\n",
        "def filter(data):\n",
        "  res = []\n",
        "\n",
        "  for i, obj in enumerate(data):\n",
        "      turns = obj.get(\"turns\", None)\n",
        "      for turn in turns:\n",
        "          if turn is not None:\n",
        "              utterance = turn.get(\"utterance\", None)\n",
        "              if utterance is not None:\n",
        "                  frames = turn.get(\"frames\", None)\n",
        "                  if frames is not None:\n",
        "                      for frame in frames: \n",
        "                          state = frame.get(\"state\", None)\n",
        "                          if state is not None:\n",
        "                              active_intent = state.get(\"active_intent\", None)\n",
        "                              if active_intent is not None:\n",
        "                                  if active_intent == \"find_restaurant\":\n",
        "                                    active_intent = 1\n",
        "                                  elif active_intent == \"book_restaurant\":\n",
        "                                    active_intent = 2\n",
        "                                  else:\n",
        "                                    active_intent = 0\n",
        "\n",
        "                                  res.append((utterance, active_intent))\n",
        "                                  break\n",
        "\n",
        "  return res\n",
        "\n",
        "train_dataset = filter(myJsonTrain)\n",
        "for i, elem in enumerate(train_dataset):\n",
        "      print(elem)\n",
        "      if i > 30:\n",
        "        print(\"--------------------\")\n",
        "        break\n",
        "test_dataset = filter(myJsonTest)\n",
        "for i, elem in enumerate(test_dataset):\n",
        "      print(elem)\n",
        "      if i > 30:\n",
        "        print(\"--------------------\")\n",
        "        break\n",
        "\n",
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "      (\n",
        "          tf.cast([text for text, label in train_dataset], tf.string),\n",
        "          tf.cast([label for text, label in train_dataset], tf.int32)\n",
        "      )\n",
        "  )\n",
        "\n",
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "      (\n",
        "          [text for text, label in test_dataset],\n",
        "          [label for text, label in test_dataset]\n",
        "      )\n",
        "  )\n",
        "\n",
        "BUFFER_SIZE = 10000\n",
        "BATCH_SIZE = 64\n",
        "train_dataset = train_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\n",
        "test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "('i need a place to dine in the center thats expensive', 1)\n",
            "('Any sort of food would be fine, as long as it is a bit expensive. Could I get the phone number for your recommendation?', 1)\n",
            "('Sounds good, could I get that phone number? Also, could you recommend me an expensive hotel?', 1)\n",
            "('Yes. Can you book it for me?', 0)\n",
            "('i want to book it for 2 people and 2 nights starting from saturday.', 0)\n",
            "('That is all I need to know. Thanks, good bye.', 0)\n",
            "('Guten Tag, I am staying overnight in Cambridge and need a place to sleep. I need free parking and internet.', 0)\n",
            "(\"No, but I'd really like to be on the south end of the city. Do any of those fit the bill?\", 0)\n",
            "(\"No I don't care about the price. Which one do you recommend?\", 0)\n",
            "('Yes, book it for 4 people and 4 nights starting from tuesday.', 0)\n",
            "('How about for 3 nights?', 0)\n",
            "('Great. I am all set then. Have a nice day. Bye.', 0)\n",
            "('Hi there! Can you give me some info on Cityroomz?', 0)\n",
            "('Yes please. I need it for 7 people for 3 nights starting on tuesday.', 0)\n",
            "('I would like to book it for 3 nights beginning on Tuesday.', 0)\n",
            "('Yeah, I need a restaurant in the west and with expensive pricing.', 1)\n",
            "(\"No, I don't have a preference, but I need the phone number and postcode.\", 1)\n",
            "('No, right now, I just need the infor. Thanks!', 0)\n",
            "('That is all. thanks', 0)\n",
            "('I am looking for a hotel named alyesbray lodge guest house.', 0)\n",
            "('I would like to book a reservation for it. Can you help me with that?', 0)\n",
            "('We will be arriving on Sunday and will stay for 5 nights.', 0)\n",
            "('There will be 8 guests.', 0)\n",
            "('that is it thank you.', 0)\n",
            "('Can you actually look up a restaurant for me as well?', 0)\n",
            "(\"It's a place called Don Pasquale Pizzeria.\", 1)\n",
            "(\"Yes, I do. I'll need it booked for the same day, same people, and we'd like to eat at 19:00.\", 2)\n",
            "(\"Great. One more thing. Can you book a taxi between the two places? I'd like to arrive at the restaurant in time for my reservation.\", 0)\n",
            "('Thank you so much that was all I needed.', 0)\n",
            "('i need a train on tuesday out of kings lynn', 0)\n",
            "('I want to leave on Tuesday.', 0)\n",
            "(\"I'd like to leave after 9:30.\", 0)\n",
            "--------------------\n",
            "('I need train reservations from norwich to cambridge', 0)\n",
            "(\"I'd like to leave on Monday and arrive by 18:00.\", 0)\n",
            "('Before booking, I would also like to know the travel time, price, and departure time please.', 0)\n",
            "('No hold off on booking for now. Can you help me find an attraction called cineworld cinema?', 0)\n",
            "('Yes, that was all I needed. Thank you very much!', 0)\n",
            "('Hello, I am looking for a restaurant in Cambridge. I believe it is called Golden Wok.', 1)\n",
            "('Can you book me a table for 11:00 on Friday?', 2)\n",
            "('Actually, for 4, please.', 2)\n",
            "('Great, can you also get me information or architecture in the area', 0)\n",
            "('What do you recommend?', 0)\n",
            "('Can I get the postcode for that? I also need to book a taxi to the Golden Wok.', 0)\n",
            "(\"Yes I do. I'd like to make sure I arrive at the restaurant by the booked time. Can you check?\", 0)\n",
            "('Actually all you have to do is set the taxi so it arrives by the arrived time. Am I better off booking it myself?', 0)\n",
            "('I need the contact number and car type also.', 0)\n",
            "('Thanks for the service, good day.', 0)\n",
            "(\"Hi, I'm looking for a hotel to stay in that includes free wifi. I'm looking to stay in a hotel, not a guesthouse.\", 0)\n",
            "('I would like one in the moderate price range and with free parking.', 0)\n",
            "('Okay, please book that for 3 people and 2 nights starting from Friday.', 0)\n",
            "('I would love to find a restaurant in the same price range as the Lovell Lodge.', 1)\n",
            "('I would like the west please.', 1)\n",
            "(\"I'm sorry. I actually need a restaurant in the centre.\", 1)\n",
            "('I would like chinese. I would like that for 7pm.', 2)\n",
            "('Sounds great, thanks! Actually, can you please just tell me the postcode and address?', 2)\n",
            "('I will also need a taxi to take me between the two place. Leaving from the restaurant at 24:30', 0)\n",
            "(\"I don't think that matters. Can you just make sure I leave the restaurant to the hotel no later than 24:30.\", 0)\n",
            "('Thank you so much for your help.', 0)\n",
            "('I am looking for a place to stay in the north of the city. I would prefer a 4 star hotel please.', 0)\n",
            "('No price preference needed', 0)\n",
            "('Does it have free wifi?', 0)\n",
            "('I think that would be fine.', 0)\n",
            "('I would like it book for Sunday for 5 people and 3 nights. Can I have the booking number please.', 0)\n",
            "('I also need a train that departs from cambridge.', 0)\n",
            "--------------------\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SBG7vEA1YJl9"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def plot_graphs(history, metric):\n",
        "  plt.plot(history.history[metric])\n",
        "  plt.plot(history.history['val_'+metric], '')\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(metric)\n",
        "  plt.legend([metric, 'val_'+metric])"
      ],
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vCTeANYNBSJv",
        "outputId": "c0ee9ec0-f6bf-4bbf-f659-3855e480c991"
      },
      "source": [
        "for example, label in train_dataset.take(1):\n",
        "  print('texts: ', example.numpy())\n",
        "  print()\n",
        "  print('labels: ', label.numpy())"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "texts:  [b'i need a place to dine in the center thats expensive'\n",
            " b'Any sort of food would be fine, as long as it is a bit expensive. Could I get the phone number for your recommendation?'\n",
            " b'Sounds good, could I get that phone number? Also, could you recommend me an expensive hotel?'\n",
            " b'Yes. Can you book it for me?'\n",
            " b'i want to book it for 2 people and 2 nights starting from saturday.'\n",
            " b'That is all I need to know. Thanks, good bye.'\n",
            " b'Guten Tag, I am staying overnight in Cambridge and need a place to sleep. I need free parking and internet.'\n",
            " b\"No, but I'd really like to be on the south end of the city. Do any of those fit the bill?\"\n",
            " b\"No I don't care about the price. Which one do you recommend?\"\n",
            " b'Yes, book it for 4 people and 4 nights starting from tuesday.'\n",
            " b'How about for 3 nights?'\n",
            " b'Great. I am all set then. Have a nice day. Bye.'\n",
            " b'Hi there! Can you give me some info on Cityroomz?'\n",
            " b'Yes please. I need it for 7 people for 3 nights starting on tuesday.'\n",
            " b'I would like to book it for 3 nights beginning on Tuesday.'\n",
            " b'Yeah, I need a restaurant in the west and with expensive pricing.'\n",
            " b\"No, I don't have a preference, but I need the phone number and postcode.\"\n",
            " b'No, right now, I just need the infor. Thanks!' b'That is all. thanks'\n",
            " b'I am looking for a hotel named alyesbray lodge guest house.'\n",
            " b'I would like to book a reservation for it. Can you help me with that?'\n",
            " b'We will be arriving on Sunday and will stay for 5 nights.'\n",
            " b'There will be 8 guests.' b'that is it thank you.'\n",
            " b'Can you actually look up a restaurant for me as well?'\n",
            " b\"It's a place called Don Pasquale Pizzeria.\"\n",
            " b\"Yes, I do. I'll need it booked for the same day, same people, and we'd like to eat at 19:00.\"\n",
            " b\"Great. One more thing. Can you book a taxi between the two places? I'd like to arrive at the restaurant in time for my reservation.\"\n",
            " b'Thank you so much that was all I needed.'\n",
            " b'i need a train on tuesday out of kings lynn'\n",
            " b'I want to leave on Tuesday.' b\"I'd like to leave after 9:30.\"\n",
            " b'Looking for a train Tuesday leaving kings lynn after 9:30 to go to cambridge.'\n",
            " b\"No, I'd like a train leaving after 09:30 departing from Kings Lynn and going to Cambridge. Please take another look?\"\n",
            " b'Wow...no, I really needed that time. I guess not. Thanks anyway.'\n",
            " b'Yes, that works. Please book for two people. Thanks for checking again.'\n",
            " b'Perfect. Thank you for your help. Have a great day. Bye.'\n",
            " b'Have a nice day.'\n",
            " b'I am looking for a restaurant. I would like something cheap that has Chinese food.'\n",
            " b'Yes, could you make a reservation for 1 at 20:00 on Saturday?'\n",
            " b'Thank you so much for your help!' b'Thanks, you too. Goodbye.'\n",
            " b'Please find me a train from cambridge to stansted airport'\n",
            " b'Saturday leaving Cambridge anytime after 20:00 please'\n",
            " b'Can you book me 6 tickets please?'\n",
            " b'I am also looking for The Riverside Brasserie.'\n",
            " b'Yes, I would like to book it and get a reference number.'\n",
            " b'Can you try for Saturday at 13:00?' b'6 people will be dining'\n",
            " b'Thanks for everything you have been great!'\n",
            " b'No that is all I needed. Thank you ever so kindly.'\n",
            " b\"I'm looking for an expensive restaurant in the centre if you could help me.\"\n",
            " b\"No, not really. I think I'd like to try something different. Could you suggest something?\"\n",
            " b'Yes, I would like both the phone number and the postcode please.'\n",
            " b'Can I also have the address please?'\n",
            " b'I also want to see the travel times for a train going from Kings Lynn from Cambridge on Saturday. It should leave after 09:15.'\n",
            " b'I got that backwards. Need a train leaving Kings Lynn after 9:15 and arriving in Cambridge sometime on Saturday.'\n",
            " b'Sure. Could you tell me the exact travel time?'\n",
            " b'that is it for today. good day thank you'\n",
            " b\"I'm looking for a places to go and see during my upcoming trip to Cambridge.\"\n",
            " b'I would like to go to the south area please.'\n",
            " b\"That's a lot of choices, how about nightclubs? Can you get me a couple of phone numbers for good ones? I'm hoping to catch DJ Squalour from Ibiza!\"\n",
            " b'Yes, I would like an expensive hotel with free parking.'\n",
            " b'Is it four star?']\n",
            "\n",
            "labels:  [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0\n",
            " 0 1 2 0 0 0 0 0 1 1 2 2 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0S-S11Hhcp79",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b449c17e-0612-4369-c1a6-198d7646d1e7"
      },
      "source": [
        "# encoder\n",
        "encoder = tf.keras.layers.experimental.preprocessing.TextVectorization()\n",
        "encoder.adapt(train_dataset.map(lambda text, label: text))\n",
        "\n",
        "vocab = np.array(encoder.get_vocabulary())\n",
        "print(vocab[:20])\n",
        "print(\"vocab size:\", len(vocab))"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['' '[UNK]' 'i' 'the' 'a' 'to' 'for' 'you' 'need' 'and' 'that' 'in'\n",
            " 'please' 'can' 'me' 'is' 'on' 'thank' 'like' 'it']\n",
            "vocab size: 1385\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "13QRWGQbh19k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38cbfffa-0177-4537-a9b8-598eaba3d19c"
      },
      "source": [
        "encoded_example = encoder(example).numpy()\n",
        "encoded_example"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   2,    8,    4, ...,    0,    0,    0],\n",
              "       [  73,  704,   21, ...,    0,    0,    0],\n",
              "       [  89,   96,   59, ...,    0,    0,    0],\n",
              "       ...,\n",
              "       [  49,    4,  472, ...,  952,   42, 1147],\n",
              "       [  20,    2,   22, ...,    0,    0,    0],\n",
              "       [  15,   19,  253, ...,    0,    0,    0]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IMAEobJKqHv8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcbc948a-51f0-4694-d2da-84d00479fdfc"
      },
      "source": [
        "for n in range(3):\n",
        "  print(\"Original: \", example[n].numpy())\n",
        "  print(\"Round-trip: \", \" \".join(vocab[encoded_example[n]]))\n",
        "  print()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Original:  b'i need a place to dine in the center thats expensive'\n",
            "Round-trip:  i need a place to dine in the center thats expensive                 \n",
            "\n",
            "Original:  b'Any sort of food would be fine, as long as it is a bit expensive. Could I get the phone number for your recommendation?'\n",
            "Round-trip:  any sort of food would be fine as long as it is a bit expensive could i get the phone number for your recommendation    \n",
            "\n",
            "Original:  b'Sounds good, could I get that phone number? Also, could you recommend me an expensive hotel?'\n",
            "Round-trip:  sounds good could i get that phone number also could you recommend me an expensive hotel            \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jo1jjO3vn0jo"
      },
      "source": [
        "model = tf.keras.Sequential([\n",
        "    encoder,\n",
        "    tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 64, mask_zero=True),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,  return_sequences=True)),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(3, activation=\"softmax\")\n",
        "])"
      ],
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7aRy9zs5to9x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "750ba1a1-1077-4824-989b-55cbf8cc40aa"
      },
      "source": [
        "print([layer.supports_masking for layer in model.layers])"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[False, True, True, True, True, True, True]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O41gw3KfWHus",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01510f15-a066-4fc0-e3a4-56cea9cc9cc5"
      },
      "source": [
        "# predict on a sample text without padding.\n",
        "\n",
        "sample_text = (\"I'm looking for a local place to dine in the centre that serves chinese food.\")\n",
        "predictions = model.predict(np.array([sample_text]))\n",
        "print(predictions[0])"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:6 out of the last 11 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f231ee4c560> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
            "[0.33227208 0.33422267 0.33350527]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UIgpuTeFNDzq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3d43802-064d-4049-d642-d47c895774a3"
      },
      "source": [
        "# predict on a sample text with padding\n",
        "\n",
        "padding = \"the \" * 2000\n",
        "predictions = model.predict(np.array([sample_text, padding]))\n",
        "print(predictions[0])"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.33227208 0.33422267 0.33350527]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hEPV5jVGp-is"
      },
      "source": [
        "model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n",
        "              optimizer=tf.keras.optimizers.Adam(1e-4),\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cl5VZzHGu0mI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8cfda34a-74fc-4c5f-e311-4ce67499b769"
      },
      "source": [
        "history = model.fit(train_dataset, epochs=10,\n",
        "                    validation_data=test_dataset,\n",
        "                    validation_steps=30, verbose=1)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "56/56 [==============================] - 24s 194ms/step - loss: 1.0643 - accuracy: 0.7292 - val_loss: 1.0005 - val_accuracy: 0.7906\n",
            "Epoch 2/10\n",
            "56/56 [==============================] - 6s 108ms/step - loss: 0.8734 - accuracy: 0.7793 - val_loss: 0.7088 - val_accuracy: 0.7906\n",
            "Epoch 3/10\n",
            "56/56 [==============================] - 6s 108ms/step - loss: 0.7298 - accuracy: 0.7796 - val_loss: 0.6486 - val_accuracy: 0.7906\n",
            "Epoch 4/10\n",
            "56/56 [==============================] - 6s 107ms/step - loss: 0.6703 - accuracy: 0.7796 - val_loss: 0.5890 - val_accuracy: 0.7906\n",
            "Epoch 5/10\n",
            "56/56 [==============================] - 6s 107ms/step - loss: 0.5929 - accuracy: 0.7799 - val_loss: 0.5193 - val_accuracy: 0.7927\n",
            "Epoch 6/10\n",
            "56/56 [==============================] - 6s 109ms/step - loss: 0.5063 - accuracy: 0.8065 - val_loss: 0.4734 - val_accuracy: 0.8370\n",
            "Epoch 7/10\n",
            "56/56 [==============================] - 6s 110ms/step - loss: 0.4501 - accuracy: 0.8473 - val_loss: 0.4485 - val_accuracy: 0.8438\n",
            "Epoch 8/10\n",
            "56/56 [==============================] - 6s 108ms/step - loss: 0.4250 - accuracy: 0.8629 - val_loss: 0.4268 - val_accuracy: 0.8568\n",
            "Epoch 9/10\n",
            "56/56 [==============================] - 6s 108ms/step - loss: 0.3877 - accuracy: 0.8717 - val_loss: 0.4112 - val_accuracy: 0.8583\n",
            "Epoch 10/10\n",
            "56/56 [==============================] - 6s 107ms/step - loss: 0.3698 - accuracy: 0.8779 - val_loss: 0.4006 - val_accuracy: 0.8604\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W5BSrh6okwnd",
        "outputId": "11c9c3cb-0e87-47c8-a6e8-54a20e7932dc"
      },
      "source": [
        "test_loss, test_acc = model.evaluate(test_dataset)\n",
        "\n",
        "print('Test Loss:', test_loss)\n",
        "print('Test Accuracy:', test_acc)"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "61/61 [==============================] - 2s 26ms/step - loss: 0.4041 - accuracy: 0.8602\n",
            "Test Loss: 0.4041191339492798\n",
            "Test Accuracy: 0.8602290749549866\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "pf7DmlIsk75A",
        "outputId": "f941a7b8-0200-432d-bd24-52dec15cff1d"
      },
      "source": [
        "plt.figure(figsize=(16, 8))\n",
        "plt.subplot(1, 2, 1)\n",
        "plot_graphs(history, 'accuracy')\n",
        "plt.ylim(None, 1)\n",
        "plt.subplot(1, 2, 2)\n",
        "plot_graphs(history, 'loss')\n",
        "plt.ylim(0, None)"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 1.098986004292965)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 100
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wD6tk1JqmLwk"
      },
      "source": [
        "model = tf.keras.Sequential([\n",
        "    encoder,\n",
        "    tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 64, mask_zero=True),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,  return_sequences=True)),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n",
        "    tf.keras.layers.Dense(64, activation='relu'),\n",
        "    tf.keras.layers.Dropout(0.5),\n",
        "    tf.keras.layers.Dense(3, activation=\"softmax\")\n",
        "])"
      ],
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NeCeRJSmmeZL"
      },
      "source": [
        "model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n",
        "              optimizer=tf.keras.optimizers.Adam(1e-4),\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9lHM_rQemlW-",
        "outputId": "27ed05a9-1a79-4f4a-9caa-bb54455f02cc"
      },
      "source": [
        "history = model.fit(train_dataset, epochs=10,\n",
        "                    validation_data=test_dataset,\n",
        "                    validation_steps=30)"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "56/56 [==============================] - 75s 195ms/step - loss: 1.0178 - accuracy: 0.7796 - val_loss: 0.9087 - val_accuracy: 0.7906\n",
            "Epoch 2/10\n",
            "56/56 [==============================] - 6s 108ms/step - loss: 0.8017 - accuracy: 0.7796 - val_loss: 0.6829 - val_accuracy: 0.7906\n",
            "Epoch 3/10\n",
            "56/56 [==============================] - 6s 109ms/step - loss: 0.6987 - accuracy: 0.7796 - val_loss: 0.6185 - val_accuracy: 0.7906\n",
            "Epoch 4/10\n",
            "56/56 [==============================] - 6s 110ms/step - loss: 0.6291 - accuracy: 0.7796 - val_loss: 0.5494 - val_accuracy: 0.7917\n",
            "Epoch 5/10\n",
            "56/56 [==============================] - 6s 111ms/step - loss: 0.5428 - accuracy: 0.7963 - val_loss: 0.4878 - val_accuracy: 0.8208\n",
            "Epoch 6/10\n",
            "56/56 [==============================] - 6s 109ms/step - loss: 0.4723 - accuracy: 0.8371 - val_loss: 0.4591 - val_accuracy: 0.8448\n",
            "Epoch 7/10\n",
            "56/56 [==============================] - 6s 109ms/step - loss: 0.4328 - accuracy: 0.8584 - val_loss: 0.4353 - val_accuracy: 0.8578\n",
            "Epoch 8/10\n",
            "56/56 [==============================] - 6s 111ms/step - loss: 0.4060 - accuracy: 0.8666 - val_loss: 0.4186 - val_accuracy: 0.8615\n",
            "Epoch 9/10\n",
            "56/56 [==============================] - 6s 110ms/step - loss: 0.3739 - accuracy: 0.8739 - val_loss: 0.4074 - val_accuracy: 0.8630\n",
            "Epoch 10/10\n",
            "56/56 [==============================] - 6s 110ms/step - loss: 0.3578 - accuracy: 0.8827 - val_loss: 0.3961 - val_accuracy: 0.8651\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_vSM_L9hmrsV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "846a7c76-4ab0-45d0-d775-32a287816256"
      },
      "source": [
        "test_loss, test_acc = model.evaluate(test_dataset)\n",
        "\n",
        "print('Test Loss:', test_loss)\n",
        "print('Test Accuracy:', test_acc)"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "61/61 [==============================] - 2s 26ms/step - loss: 0.4030 - accuracy: 0.8641\n",
            "Test Loss: 0.40304991602897644\n",
            "Test Accuracy: 0.8641332387924194\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RQPAFBLxmz6_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "outputId": "a1ea4904-06b0-4adc-c40f-a40aeec9a1cb"
      },
      "source": [
        "plt.figure(figsize=(16, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plot_graphs(history, 'accuracy')\n",
        "plt.subplot(1, 2, 2)\n",
        "plot_graphs(history, 'loss')"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}